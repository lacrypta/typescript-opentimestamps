// typescript-opentimestamps: An OpenTimestamps client written in TypeScript.
// Copyright (C) 2024  La Crypta
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

/**
 * This module exposes timestamp verification functions.
 *
 * @packageDocumentation
 * @module
 */

import type { Path } from './internals';
import type { Leaf, Timestamp, Verifier } from './types';

import { callOps, treeToPaths } from './internals';

/**
 * Verify the given {@link Timestamp} with the given {@link Verifier | Verifiers}.
 *
 * This function will extract all {@link Leaf | Leaves} from the given {@link Timestamp}, run all operations leading to them, and, with the resulting message, call each {@link Verifier} given.
 *
 * {@link !Error | Errors} encountered upon submission are not thrown, but rather collected and returned alongside the result.
 *
 * @example
 * ```typescript
 * import type { Timestamp } from './src/types';
 *
 * import { read } from './src/read';
 * import { verify } from './src/verify';
 * import { default as verifiers } from './src/verifiers';
 *
 * const timestamp: Timestamp = read(Uint8Array.of(
 *   0x00, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65,
 *   0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x00, 0x00, 0x50,
 *   0x72, 0x6f, 0x6f, 0x66, 0x00, 0xbf, 0x89, 0xe2, 0xe8,
 *   0x84, 0xe8, 0x92, 0x94, 0x01, 0x08, 0x05, 0xc4, 0xf6,
 *   0x16, 0xa8, 0xe5, 0x31, 0x0d, 0x19, 0xd9, 0x38, 0xcf,
 *   0xd7, 0x69, 0x86, 0x4d, 0x7f, 0x4c, 0xcd, 0xc2, 0xca,
 *   0x8b, 0x47, 0x9b, 0x10, 0xaf, 0x83, 0x56, 0x4b, 0x09,
 *   0x7a, 0xf9, 0xf0, 0x10, 0xe7, 0x54, 0xbf, 0x93, 0x80,
 *   0x6a, 0x7e, 0xba, 0xa6, 0x80, 0xef, 0x7b, 0xd0, 0x11,
 *   0x4b, 0xf4, 0x08, 0xf0, 0x10, 0xb5, 0x73, 0xe8, 0x85,
 *   0x0c, 0xfd, 0x9e, 0x63, 0xd1, 0xf0, 0x43, 0xfb, 0xb6,
 *   0xfc, 0x25, 0x0e, 0x08, 0xf1, 0x04, 0x57, 0xcf, 0xa5,
 *   0xc4, 0xf0, 0x08, 0x6f, 0xb1, 0xac, 0x8d, 0x4e, 0x4e,
 *   0xb0, 0xe7, 0x08, 0xf1, 0x20, 0x65, 0x63, 0xbb, 0x43,
 *   0x2a, 0x82, 0x9a, 0xc8, 0xd6, 0xc5, 0x4d, 0x1a, 0x93,
 *   0x30, 0xd2, 0x24, 0x06, 0x64, 0xca, 0xd8, 0x33, 0x8d,
 *   0xd0, 0x5e, 0x63, 0xee, 0xc1, 0x2a, 0x18, 0xa6, 0x8d,
 *   0x50, 0x08, 0xf0, 0x20, 0xba, 0x83, 0xdd, 0xbe, 0x2b,
 *   0xd6, 0x77, 0x2b, 0x45, 0x84, 0xb4, 0x6e, 0xae, 0xd2,
 *   0x36, 0x06, 0xb7, 0x12, 0xdd, 0x74, 0x0a, 0x89, 0xe9,
 *   0x9e, 0x92, 0x75, 0x71, 0xf7, 0x7f, 0x64, 0xaa, 0x21,
 *   0x08, 0xf1, 0x20, 0x19, 0x3c, 0x81, 0xe7, 0x0e, 0x44,
 *   0x72, 0xb5, 0x28, 0x11, 0xfe, 0x78, 0x37, 0xce, 0x12,
 *   0x93, 0xb1, 0xd3, 0x54, 0x2b, 0x24, 0x4f, 0x27, 0xf4,
 *   0x41, 0x82, 0xaf, 0x82, 0x87, 0xfc, 0x9f, 0x4e, 0x08,
 *   0xf1, 0x20, 0xc6, 0xc5, 0x76, 0x96, 0xfc, 0xd3, 0x9b,
 *   0x4d, 0x99, 0x24, 0x77, 0x88, 0x9d, 0x04, 0xe6, 0x88,
 *   0x28, 0x29, 0xf5, 0xfe, 0x55, 0x63, 0x04, 0xa2, 0x81,
 *   0xdc, 0xe2, 0x58, 0xb7, 0x8a, 0x1f, 0x07, 0x08, 0xf1,
 *   0xae, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0xb5, 0x92,
 *   0xca, 0x03, 0x8e, 0xaa, 0x9c, 0x1b, 0x69, 0x8a, 0x04,
 *   0x9b, 0x09, 0xbe, 0x8e, 0xe8, 0x97, 0x2b, 0x5d, 0x0e,
 *   0xca, 0x29, 0xc1, 0x99, 0x46, 0x02, 0x7b, 0xa9, 0x24,
 *   0x8a, 0xcb, 0x03, 0x00, 0x00, 0x00, 0x00, 0x48, 0x47,
 *   0x30, 0x44, 0x02, 0x20, 0x0f, 0x99, 0x2d, 0x5d, 0xbe,
 *   0xc6, 0xed, 0xb1, 0x43, 0xf7, 0x6c, 0x14, 0xe4, 0x53,
 *   0x8e, 0x0a, 0x50, 0xd6, 0x6b, 0xae, 0x27, 0xc6, 0x83,
 *   0xcf, 0x42, 0x91, 0xe4, 0x75, 0x28, 0x7e, 0xc6, 0xaf,
 *   0x02, 0x20, 0x10, 0xba, 0xe9, 0x44, 0x33, 0x90, 0xaa,
 *   0xdb, 0xd2, 0xe2, 0xb8, 0xb9, 0xf7, 0x57, 0xbe, 0xea,
 *   0x26, 0xd3, 0xf5, 0xc3, 0x45, 0xf7, 0xe6, 0xb4, 0xd8,
 *   0x1b, 0x3d, 0x39, 0x0e, 0xdd, 0x38, 0x18, 0x01, 0xfd,
 *   0xff, 0xff, 0xff, 0x02, 0x2e, 0xb1, 0x42, 0x00, 0x00,
 *   0x00, 0x00, 0x00, 0x23, 0x21, 0x03, 0x38, 0xb2, 0x49,
 *   0x0e, 0xaa, 0x94, 0x95, 0x38, 0x42, 0x37, 0x37, 0xcd,
 *   0x83, 0x44, 0x98, 0x35, 0xd1, 0x06, 0x1d, 0xca, 0x88,
 *   0xf4, 0xff, 0xac, 0xa7, 0x18, 0x1b, 0xca, 0xc6, 0x7d,
 *   0x20, 0x95, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 *   0x00, 0x00, 0x22, 0x6a, 0x20, 0xf0, 0x04, 0x67, 0x8a,
 *   0x06, 0x00, 0x08, 0x08, 0xf1, 0x20, 0x97, 0x7a, 0xc3,
 *   0x9d, 0x89, 0xbb, 0x8b, 0x87, 0x9d, 0x4a, 0x2c, 0x38,
 *   0xfc, 0xa4, 0x8a, 0x04, 0x0c, 0x82, 0x63, 0x79, 0x36,
 *   0x70, 0x7f, 0xc4, 0x52, 0xc9, 0xdb, 0x13, 0x90, 0xb5,
 *   0x15, 0xc8, 0x08, 0x08, 0xf0, 0x20, 0x74, 0x26, 0x8b,
 *   0x23, 0xe6, 0x14, 0x99, 0x7d, 0x18, 0xc7, 0xc0, 0x63,
 *   0xd8, 0xd8, 0x2d, 0x7e, 0x1d, 0xb5, 0x7b, 0x5f, 0xc4,
 *   0x34, 0x6c, 0xc4, 0x7a, 0xc2, 0xc4, 0x6d, 0x54, 0x16,
 *   0x8d, 0x71, 0x08, 0x08, 0xf1, 0x20, 0x56, 0x0c, 0x45,
 *   0xb8, 0x54, 0xf8, 0x50, 0x7c, 0x8b, 0xfa, 0xcf, 0x26,
 *   0x62, 0xfe, 0xf2, 0x69, 0xc2, 0x08, 0xa7, 0xe5, 0xdf,
 *   0x5c, 0x31, 0x45, 0xcb, 0xce, 0x41, 0x7e, 0xca, 0xcc,
 *   0x59, 0x5e, 0x08, 0x08, 0xf1, 0x20, 0x0d, 0xba, 0x87,
 *   0x21, 0xb9, 0xcd, 0x4a, 0xc7, 0xc2, 0xfc, 0xc7, 0xe1,
 *   0x5b, 0xa2, 0xcb, 0x9f, 0x29, 0x06, 0xbf, 0xc5, 0x77,
 *   0xc2, 0x12, 0x74, 0x7c, 0xd3, 0x52, 0xd6, 0x1b, 0x5d,
 *   0x7f, 0xdb, 0x08, 0x08, 0xf1, 0x20, 0x81, 0x10, 0x7a,
 *   0x01, 0x0d, 0x52, 0x7d, 0x18, 0xba, 0xa8, 0x74, 0xbc,
 *   0x99, 0xc1, 0x9a, 0x3a, 0x7a, 0x25, 0xdf, 0xe1, 0x10,
 *   0xa4, 0xc8, 0x98, 0x5b, 0xf3, 0x0f, 0x6c, 0x3e, 0x77,
 *   0xba, 0xed, 0x08, 0x08, 0xf0, 0x20, 0xca, 0x3c, 0xdc,
 *   0xd7, 0x09, 0x34, 0x98, 0xb3, 0xf1, 0x80, 0xb3, 0x8a,
 *   0x97, 0x73, 0x20, 0x7e, 0x52, 0xfc, 0xa9, 0x92, 0xc2,
 *   0xdb, 0x1d, 0x66, 0x0f, 0xdf, 0xa1, 0xb3, 0x29, 0x50,
 *   0x0c, 0x39, 0x08, 0x08, 0xf0, 0x20, 0xca, 0x6c, 0x64,
 *   0x64, 0xdd, 0x02, 0xce, 0xd6, 0x4c, 0x9c, 0x82, 0x24,
 *   0x6c, 0xcf, 0xc6, 0x26, 0xca, 0xa7, 0x8d, 0x9e, 0x62,
 *   0x4c, 0xc1, 0x10, 0x13, 0xe3, 0xb4, 0xbb, 0xc0, 0x9e,
 *   0x98, 0x91, 0x08, 0x08, 0xf0, 0x20, 0x1c, 0x7a, 0xe0,
 *   0xfe, 0xac, 0x01, 0x8f, 0xa1, 0x9b, 0xd8, 0x45, 0x9a,
 *   0x4a, 0xe9, 0x71, 0xb3, 0xe6, 0xc8, 0x16, 0xa8, 0x72,
 *   0x54, 0x31, 0x7e, 0x0a, 0x9f, 0x0e, 0xc9, 0x42, 0x5b,
 *   0xa7, 0x61, 0x08, 0x08, 0xf1, 0x20, 0x90, 0x26, 0x3a,
 *   0x73, 0xe4, 0x15, 0xa9, 0x75, 0xdc, 0x07, 0x70, 0x67,
 *   0x72, 0xdb, 0xb6, 0x20, 0x0e, 0xf0, 0xd0, 0xa2, 0x30,
 *   0x06, 0x21, 0x8e, 0x65, 0xd4, 0xa5, 0xd8, 0x11, 0x20,
 *   0x67, 0x30, 0x08, 0x08, 0xf1, 0x20, 0x79, 0x53, 0x01,
 *   0x63, 0xb0, 0xd9, 0x12, 0x24, 0x94, 0x38, 0x62, 0x8b,
 *   0xd7, 0x91, 0xac, 0x94, 0x02, 0xfa, 0x70, 0x7e, 0xb3,
 *   0x14, 0xc6, 0x23, 0x7b, 0x0e, 0xf9, 0x02, 0x71, 0x62,
 *   0x5c, 0x84, 0x08, 0x08, 0x00, 0x05, 0x88, 0x96, 0x0d,
 *   0x73, 0xd7, 0x19, 0x01, 0x03, 0xe8, 0x94, 0x1a,
 * ));
 *
 * console.log(await verify(timestamp, verifiers));
 *   // {
 *   //   attestations: {
 *   //     '1473227803': [ 'verifyViaBlockchainInfo', 'verifyViaBlockstream' ]
 *   //   },
 *   //   errors: {}
 *   // }
 * ```
 *
 * @param timestamp - The {@link Timestamp} to verify.
 * @param verifiers - An object, mapping a name to a {@link Verifier} proper to utilize.
 * @returns An object, mapping `attestations` to an object in turn mapping a UNIX timestamp to a list of verifier names verifying the existence of the {@link Timestamp} at said height; and mapping `errors` to an object in turn mapping a verifier name to a list of {@link !Error | Errors} encountered.
 */
export async function verify(
  timestamp: Timestamp,
  verifiers: Record<string, Verifier>,
): Promise<{ attestations: Record<number, string[]>; errors: Record<string, Error[]> }> {
  const result: { attestations: Record<number, string[]>; errors: Record<string, Error[]> } = {
    attestations: {},
    errors: {},
  };

  (
    await Promise.all(
      treeToPaths(timestamp.tree)
        .map(({ operations, leaf }: Path): Promise<[string, number | Error | undefined]>[] => {
          const msg: Uint8Array = callOps(operations, timestamp.fileHash.value);
          return Object.entries(verifiers).map(
            async ([name, verifier]: [string, Verifier]): Promise<[string, number | undefined | Error]> => {
              try {
                return [name, await verifier(msg, leaf)];
              } catch (e: unknown) {
                if (e instanceof Error) {
                  return [name, new Error(`Error (${name}): ${e.message}`)];
                } else {
                  return [name, new Error(`Error (${name}): unknown error in verifier`)];
                }
              }
            },
          );
        })
        .reduce(
          (
            prev: Promise<[string, number | Error | undefined]>[],
            curr: Promise<[string, number | Error | undefined]>[],
          ): Promise<[string, number | Error | undefined]>[] => {
            return prev.concat(curr);
          },
          [],
        ),
    )
  ).forEach(([verifierName, leafResult]: [string, number | undefined | Error]): void => {
    if (undefined === leafResult) {
      return;
    } else if (leafResult instanceof Error) {
      if (!(verifierName in result.errors)) {
        result.errors[verifierName] = [];
      }
      result.errors[verifierName]!.push(leafResult);
    } else {
      if (!(leafResult in result.attestations)) {
        result.attestations[leafResult] = [];
      }
      result.attestations[leafResult]!.push(verifierName);
    }
  });

  return result;
}
